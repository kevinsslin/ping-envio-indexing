type Ping_Approval {
  id: ID!
  owner: String!
  spender: String!
  value: BigInt!
}

type Ping_AuthorizationCanceled {
  id: ID!
  authorizer: String!
  nonce: String!
}

type Ping_AuthorizationUsed {
  id: ID!
  authorizer: String!
  nonce: String!
}

type Ping_EIP712DomainChanged {
  id: ID!
}

type Ping_FeesCollected {
  id: ID!
  recipient: String!
  amountToken0: BigInt!
  amountToken1: BigInt!
}

type Ping_LiquidityDeployed {
  id: ID!
  tokenId: BigInt!
  liquidity: BigInt!
}

type Ping_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type Ping_RoleAdminChanged {
  id: ID!
  role: String!
  previousAdminRole: String!
  newAdminRole: String!
}

type Ping_RoleGranted {
  id: ID!
  role: String!
  account: String!
  sender: String!
}

type Ping_RoleRevoked {
  id: ID!
  role: String!
  account: String!
  sender: String!
}

type Ping_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt!
}

type UniswapV3Pool_Burn {
  id: ID!
  owner: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type UniswapV3Pool_Collect {
  id: ID!
  owner: String!
  recipient: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type UniswapV3Pool_CollectProtocol {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
}

type UniswapV3Pool_Flash {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
  paid0: BigInt!
  paid1: BigInt!
}

type UniswapV3Pool_IncreaseObservationCardinalityNext {
  id: ID!
  observationCardinalityNextOld: BigInt!
  observationCardinalityNextNew: BigInt!
}

type UniswapV3Pool_Initialize {
  id: ID!
  sqrtPriceX96: BigInt!
  tick: BigInt!
}

type UniswapV3Pool_Mint {
  id: ID!
  sender: String!
  owner: String!
  tickLower: BigInt!
  tickUpper: BigInt!
  amount: BigInt!
  amount0: BigInt!
  amount1: BigInt!
}

type UniswapV3Pool_SetFeeProtocol {
  id: ID!
  feeProtocol0Old: BigInt!
  feeProtocol1Old: BigInt!
  feeProtocol0New: BigInt!
  feeProtocol1New: BigInt!
}

type UniswapV3Pool_Swap {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt!
  amount1: BigInt!
  sqrtPriceX96: BigInt!
  liquidity: BigInt!
  tick: BigInt!
}

